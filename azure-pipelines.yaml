name: $(Build.DefinitionName)_$(Build.SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

pool:
  vmImage: "Ubuntu-latest"

trigger:
  - main

parameters:
  - name: env
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - systemtest_manual
      - systemtest_auto
      - uat
      - pre_prod
      - production
  - name: devops_library_branch
    displayName: DevOps Library Branch
    type: string
    default: main
  - name: run_sonarcloud_analysis
    displayName: Run Sonar Cloud Analysis
    type: boolean
    default: true
  - name: skip_deployment
    displayName: Skip Deployment
    type: boolean
    default: true

variables:
  - name: vstsFeed
    value: "0e030eb0-cb72-4f42-b99a-26e6544271c3/0a3e0ad2-23b6-4e8b-ae12-cd6d01fe97e7"
  - name: solution
    value: "**/*.sln"
  - name: project
    value: "**/*.csproj"
  - name: buildConfiguration
    value: "Release"
  - name: service_connection
    ${{ if eq(parameters.env, 'dev') }}:
      value: "ARM Dev Connection New"
    ${{ if eq(parameters.env, 'systemtest_auto') }}:
      value: "ARM Automated Test Connection"  
    ${{ if eq(parameters.env, 'systemtest_manual') }}:
      value: "ARM Manual Test Connection"

  - name: appSettingsJson
    value: |
      [
        {
          "name": "AppSettings__AzureAppConfiguration__Endpoint",
          "value": "$(AppConfigurationEndpoint)",
          "slotSetting": false
        },
        {
          "name": "AppSettings__AzureAppConfiguration__IdentityClientID",
          "value": "$(AppConfigurationClientID)",
          "slotSetting": false
        },
        {
          "name": "AppSettings__QueueName",
          "value": "$(EmailNotificationQueueName)",
          "slotSetting": false
        }
      ]

resources:
  repositories:
    - repository: library
      type: github
      name: 'HealthResearchAuthority/rsp-azure-devops-library'
      endpoint: AzureDevOpsToGitHubConnection
      ref: ${{ parameters.devops_library_branch }}

stages:
  - stage: dev
    variables: 
      - group: 'DevelopmentEnvironment'
    condition: eq('${{ parameters.env }}', 'dev') 
    jobs:
      - job: AllowNetworkAccess
        displayName: "Whitelist IP in Function App and Storage"
        steps:
          - bash: |
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP

          - bash: |
              echo "Allowing IP: $(fetchPublicIP.ipaddress)"
              az functionapp config access-restriction add -g rg-rsp-applications-spoke-dev-uks -n func-notify-dev --rule-name build_server --action Allow --ip-address $(fetchPublicIP.ipaddress) --priority 250 --scm-site true
              az storage account network-rule add -g rg-rsp-applications-spoke-dev-uks --account-name stfnnotifydev --ip-address $(fetchPublicIP.ipaddress)

      - template: jobs/build.yaml@library
        parameters:
          sonar_project_key: HealthResearchAuthority_rsp-email-notifications-function
          sonar_project_name: rsp-email-notifications-function
          run_sonarcloud_analysis: ${{ parameters.run_sonarcloud_analysis }}
          run_github_security_scan: false
      - template: jobs/deployFunction.yaml@library
        parameters:
          depends_on: 'Build'
          appSettings: $(appSettingsJson)
          
  - stage: systemtest_auto
    variables: 
      - group: 'STAutoEnvironment'
    condition: eq('${{ parameters.env }}', 'systemtest_auto')
    jobs:
      - job: AllowNetworkAccess
        displayName: "Whitelist IP in Function App and Storage"
        steps:
          - bash: |
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP

          - bash: |
              echo "Allowing IP: $(fetchPublicIP.ipaddress)"
              az functionapp config access-restriction add -g $(ResourceGroup) -n $(FunctionAppServiceName) --rule-name build_server --action Allow --ip-address $(fetchPublicIP.ipaddress) --priority 250 --scm-site true
              az storage account network-rule add -g myRg --account-name mystorageaccount --ip-address $(fetchPublicIP.ipaddress)

      - template: jobs/deployFunction.yaml@library
        parameters:
          appSettings: $(appSettingsJson)
          
  - stage: systemtest_manual
    variables: 
      - group: 'STManualEnvironment'
    condition: eq('${{ parameters.env }}', 'systemtest_manual')
    jobs:
      - job: AllowNetworkAccess
        displayName: "Whitelist IP in Function App and Storage"
        steps:
          - bash: |
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP

          - bash: |
              echo "Allowing IP: $(fetchPublicIP.ipaddress)"
              az functionapp config access-restriction add -g $(ResourceGroup) -n $(FunctionAppServiceName) --rule-name build_server --action Allow --ip-address $(fetchPublicIP.ipaddress) --priority 250 --scm-site true
              az storage account network-rule add -g myRg --account-name mystorageaccount --ip-address $(fetchPublicIP.ipaddress)

      - template: jobs/deployFunction.yaml@library
        parameters:
          appSettings: $(appSettingsJson)

  - stage: system_integration_test
    jobs:
      - job: SystemIntegrationTest
        steps:
          - script: echo 'Running system integration tests...'

  - stage: uat
    jobs:
      - job: UATDeployment
        steps:
          - script: echo 'Deploying to UAT...'

  - stage: pre_prod
    jobs:
      - job: PreProdDeployment
        steps:
          - script: echo 'Deploying to Pre-Prod...'

  - stage: production
    jobs:
      - job: ProductionDeployment
        steps:
          - script: echo 'Deploying to Production...'
